/* eslint-disable one-var */
'use strict';

Object.defineProperty(exports, '__esModule', {
  value: true
});

var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

var _flatFileDb = require('flat-file-db');

var _flatFileDb2 = _interopRequireDefault(_flatFileDb);

/**
 * Cache instance to store key value pairs.
 * @type {Class}
 * @param {String} cacheFile The name of the file to cache
 */

var Cache = (function () {
  /**
   * Constructs the Cache.
   * @param  {String} cacheFile The filename for the cache.
   */

  function Cache() {
    var cacheFile = arguments.length <= 0 || arguments[0] === undefined ? 'geocache.db' : arguments[0];

    _classCallCheck(this, Cache);

    this.db = _flatFileDb2['default'].sync(cacheFile);
  }

  /**
   * Add new entries to the Cache
   * @param {String}   key  The key that shall be cached
   * @param {Object}   value The value that should be stored in the cache
   * @param {Function} callback The callback
   */

  _createClass(Cache, [{
    key: 'add',
    value: function add(key, value) {
      var callback = arguments.length <= 2 || arguments[2] === undefined ? function () {} : arguments[2];

      this.db.put(key, value, function (error) {
        if (error) {
          throw error;
        }

        callback();
      });
    }

    /**
     * Add new entries to the Cache
     * @param {String} key  The key that should be retrieved
     * @return {Object} The value
     */
  }, {
    key: 'get',
    value: function get(key) {
      return this.db.get(key);
    }
  }]);

  return Cache;
})();

exports['default'] = Cache;
module.exports = exports['default'];