'use strict';

Object.defineProperty(exports, '__esModule', {
  value: true
});

var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

var _googlemaps = require('googlemaps');

var _googlemaps2 = _interopRequireDefault(_googlemaps);

var defaults = {
  google_client_id: null, // eslint-disable-line camelcase
  google_private_key: null, // eslint-disable-line camelcase
  key: null
};

var GoogleGeocoder = (function () {
  function GoogleGeocoder() {
    _classCallCheck(this, GoogleGeocoder);
  }

  _createClass(GoogleGeocoder, null, [{
    key: 'init',

    /**
     * Inits a google maps API instance with give clientID and privateKey.
     * @param  {Object} options     Config Object
     * @return {Object}             Instance of google maps API
     */
    value: function init() {
      var options = arguments.length <= 0 || arguments[0] === undefined ? {} : arguments[0];

      options = Object.assign({}, defaults, options);
      return new _googlemaps2['default'](options);
    }
  }]);

  return GoogleGeocoder;
})();

exports['default'] = GoogleGeocoder;
module.exports = exports['default'];