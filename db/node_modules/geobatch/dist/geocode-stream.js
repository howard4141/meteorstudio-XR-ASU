'use strict';

Object.defineProperty(exports, '__esModule', {
  value: true
});

var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

var _get = function get(_x3, _x4, _x5) { var _again = true; _function: while (_again) { var object = _x3, property = _x4, receiver = _x5; _again = false; if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { _x3 = parent; _x4 = property; _x5 = receiver; _again = true; desc = parent = undefined; continue _function; } } else if ('value' in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } } };

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

function _inherits(subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var _libParallelTransform = require('./lib/parallel-transform');

var _libParallelTransform2 = _interopRequireDefault(_libParallelTransform);

/**
 * A streaming object for the geocode
 * @param {Object} geocoder The geocoder
 */

var GeocodeStream = (function (_ParallelTransform) {
  _inherits(GeocodeStream, _ParallelTransform);

  /**
   * Constructs a geocodeStream.
   * @param  {Object} geocoder A geocoder.
   * @param  {Number} queriesPerSecond The number of queries per second
   * @param  {Object} stats A statistics object.
   * @param  {Function} accessor An accessor function that returns the address
   *                             from the data item. The default returns the
   *                             data item directly.
   */

  function GeocodeStream(geocoder, queriesPerSecond) {
    var stats = arguments.length <= 2 || arguments[2] === undefined ? { current: 0 } : arguments[2];
    var accessor = arguments.length <= 3 || arguments[3] === undefined ? function (address) {
      return address;
    } : arguments[3];

    _classCallCheck(this, GeocodeStream);

    _get(Object.getPrototypeOf(GeocodeStream.prototype), 'constructor', this).call(this, queriesPerSecond, { objectMode: true });

    this.geocoder = geocoder;
    this.stats = stats;
    this.accessor = accessor;
  }

  /**
   * The _parallelTransform function for the stream.
   * @param {String}   input The address to geocode
   * @param {Function} done The done callback function
   */

  _createClass(GeocodeStream, [{
    key: '_parallelTransform',
    value: function _parallelTransform(input, done) {
      // eslint-disable-line
      var data = this.getMetaInfo(input);

      this.geocoder.geocodeAddress(this.accessor(input)).then(function (results) {
        data.result = results[0];
        data.results = results;
        data.location = results[0].geometry.location;
        done(null, data);
      })['catch'](function (error) {
        data.error = error.message;
        done(null, data);
      });
    }

    /**
     * Get the result meta information
     * @param {String} input The input
     * @return {Object} The meta information
     */
  }, {
    key: 'getMetaInfo',
    value: function getMetaInfo(input) {
      this.stats.current++;

      var metaInfo = {
        error: null,
        address: this.accessor(input),
        input: input,
        location: {},
        result: {},
        current: this.stats.current
      };

      if (this.stats.hasOwnProperty('total')) {
        var now = new Date(),
            ratio = this.stats.current / this.stats.total;

        Object.assign(metaInfo, {
          total: this.stats.total,
          pending: this.stats.total - this.stats.current,
          percent: ratio * 100,
          estimatedDuration: Math.round((now - this.stats.startTime) / ratio)
        });
      }
      return metaInfo;
    }
  }]);

  return GeocodeStream;
})(_libParallelTransform2['default']);

exports['default'] = GeocodeStream;
module.exports = exports['default'];